Spring DI 활용하기 - 이론(3)
    6. IoC와 DI
        제어의 역전 IoC - 제어의 흐름을 전통적인 방식과 다르게 뒤바꾸는 것
        Inversion of (flow) Control -> if, for 처럼 실행 흐름을 컨트롤하는것!
        전통적인 방식?
            사용자 코드가 Framework 코드를 호출
        ★★IoC에서는 Framework 코드가 사용자 코드를 호출!

        전통적인 방식 코드예시)
        Car car = new Car();
        car.turboDrive();   // 사용자 코드가 Framework 코드를 호출

        void turboDrive() {
            engine = new TurboEngine(); <- 자주변하는 부분
            engine.start();
        }

        IOC방식 코드예시)
        Car car = new Car();
        car.drive(new SuperEngine());

        void drive(Engine engine) { <- 이렇게 함으로써 변하지않는 코드가 되었다. 대신 Engine engine을 제공을 받아야 하는데 이것을 DI라고 한다!
            engine.start(); // Framework 코드가 사용자 코드를 호출출
        }

        호출하는 방향이 바뀌었다! 이것을 IoC라고 한다.
        다른 사람이 작성한 코를 호출해서 그 결과를 받는 흐름
        우리가 제공한 코드(사용자코드)를 라이브러리 쪽에서 호출을 한다.(호출 방향이 바뀜)

        왜 이렇게 해?
            자주 변하지 않는 코드, 자주 변하는 코드

            객체지향적 설계를 위해서는 분리를 잘해야해
                1.관심사의 분리
                2.변하는것과 자주 변하지 않는 것의 분리
                3.중복 코드

            IoC방식을 이용함으로써 코드를 변하지 않는 코드로 만들 수 있다.
        여기서 IoC는 2번에 해당!

        ★★의존성 주입 DI - 사용할(의존하고있는) 객체를 외부에서 주입 받는것

        클래스에서 메소드로 객체를 주입해주는것 new 써가면서 주입하는것은 수동주입.

        @Autowired 붙이면 자동주입이 된다.

        즉, IoC와 DI 는 같이 가는 개념이다.

        디자인 패턴에서 전략 패턴에 해당한다. 자기가 원하면 다른 전략을 사용할 수 있다 라는 의미에서 전략
        우리가 사용을 하길 원하는 객체를 우리가 할수 있으니까

    6. 스프링 애너테이션 - @Autowired
        인스턴스 변수(iv), setter(), 참조형 매개변수를 가진 생성자, 메서드에 적용이 가능하다.
        ★Autowired가 주입을 해준다. 각 매개변수에 알맞는 Bean을!

        예시코드)
        @Autowired
        public Car(@Value("red") String color, @Value("100") int oil, Engine engine, Door[] doors) {
            this.color = color;
            this.oil = oil;
            this.engine = engine;
            this.doors = doors;
        }
        여기서는 engine, doors를 주입해준다.

        @Autowired
        public void setEngineAndDoor(Engine engine, Door[] doors) {
            this.engine = engine;
            this.doors = doors;
        }
        이 예시는 setter는 보통 하나만 설정하지만 이렇게 두개 설정하는것도 가능하다는것을 보여주기위해 작성, 사실상 메서드로 볼 수 있다.

        생성자의 Autowired 생략이 가능하다. (안붙여도 주입을 해준다는 얘기)
        객체 초기화 하는 방법과 똑같다. 명시적, 생성자, setter 등등
        ★가능하면 생성자를 이용하는것이 바람직! 주입해야하는 빈을 빼먹을일이 없음
        생성자가 하나일때는 @Autowired 생략해도 되지만 생성자가 여러개일때는 @Autowired를 붙여서 명확히 해주는것이 좋다.

        spring container에서 타입으로 빈을 검색해서 참조 변수에 자동 주입(DI)!
        검색된 빈이 여러개 이면, 그 중에 참조변수와 이름이 일치하는것을 주입한다.

        주입 대상이 변수일 때, 검색된 빈이 1개 아니면 예외 발생
        주입 대상이 배열일 때, 검색된 빈이 여러개라도 예외 발생 x
        @Autowired(required=false)일 때, 주입할 빈을 못찾아도 예외 발생 x, 대신 null이 되겠지!

