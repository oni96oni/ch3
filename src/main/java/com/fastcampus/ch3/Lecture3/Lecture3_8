Spring DI 활용하기 - 이론(4)
    6.스프링 애너테이션 - @Resource
        Spring container에서 이름으로 빈을 검색해서 참조 변수에 자동 주입(DI) 일치하는 이름의 빈이 없으면 예외 발생
            @Autowired : byType
            @Resource : byName

        (Resource애너테이션 예시코드)
        class Car {
        //  @Resource(name="engine")
            @Resource
            Engine engine;
        }
        이름(매개변수) 생략가능! 참조변수의 이름이 빈의 이름이되어서 그걸로 검색한다!

        @Autowired는 타입으로 찾고 여러개면 그 중에서 @Qualifier로 찾는다

        (각각의 애너테이션을 이용해서 주입받는방법 예시코드)
        class Car {
            @Autowired
            @Qualifier("superEngine")
            Engine engine;
        }
        class Car {
            @Resource(name="superEngine")
            Engine engine;
        }
        둘다 동일한 코드 검색 방식의 차이
        @Resource보다 @Autowired를 더 선호한다. @Resource는 스프링애너테이션 x

    6.스프링 애너테이션 - @Component
        <component-scan>로 @Component이 클래스를 자동 검색해서 빈으로 등록

        (예시 코드)
        <context:component-scan base-package="com.fastcampus.ch3" />
        해당하는 패키지의 서브 패키지 까지 검색

        (예시 코드)
        @Component("superEngine")
        @Component
        class SuperEngine extends Engine {}

        @Component의 id(매개변수 값)생략 가능 -> 생략하면 클래스의 이름 첫글자 소문자로 바꾼뒤에 그것을 빈의 아이디로 쓴다.
        원래는 xml에다가 빈태그로 id, class 적어주어야 하는데 애너테이션을 사용할 수 있게 설정.

        @Controller, @Service, @Repository, @ControllerAdvice의 메타 애너테이션
        즉, 위의 애너테이션을 사용하면 컴포넌트 스캐너에 의해서 자동으로 빈으로 등록된다.

    6.스프링 애너테이션 - @Value, @PropertySource
        값 지정해줄 때 사용하는 애너테이션
        systemProperties, systemEnvironment 값을 가져다가 주입을 해줄 수 있다.

    7.스프링 애너테이션 vs 표준 애너테이션 (JSR-330) - Java Spec Request
    @Autowired                  @Inject                     @Inject에는 required 속성이 없음
    @Qualifier                  @Qualifier,@Named           스프링의 @Qualifire는 @Named와 유사
        x                       @Resource                   스프링에는 이름 검색이 없음
    @Scope("singleton")         @Singleton                  표준에서는 prototype이 디폴트
    @Component                  @Named, @ManagedBean        표준에서는 반드시 이름이 있어야함

    스프링에서는 @Resource를 대신할만한게 없어서 annotations-api.jar가 반드시 필요하다!

    굳이 표준애너테이션 쓸 필요 없다. 일단은 스프링 애너테이션 사용!
    스프링과 표준 @Qualifier, @Scope 이름만 같지 다른것이다.
    @Resource, @PreDestroy, @PostConstruct 빼고는 표준에너태이션 잘 사용 x

    8. 빈의 초기화 - <property>와 setter
        <property>를 이용한 빈의 속성들(iv) 초기화할 수 있다. setter를 이용한다!
        setter 코드 대신에 설정파일에 다 들어가 있다.

        <constructor-arg>를 이용한 빈 초기화. 생성자를 이용
        생성자를 이용한 초기화!

        빈 초기화 할때 <property>태그 안에
        <list>,<set>,<map> 등등 다양한것이 많다.
            String, 기본형은 value, 참조형은 ref이다.
            점점 xml을 안쓰려고하는 분위기! 자바 애너테이션을 사용하려고해

