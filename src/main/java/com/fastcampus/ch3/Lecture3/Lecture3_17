Transaction, Commit, Rollback
    1.Transaction이란?
        더이상 나눌 수 없는 작업의 단위! 짧게 tx라고도한다.
        AOP랑도 관련이 많다. AOP를 이용하면 Transaction을 쉽게 구현할 수 있다.

        insert, update, select같은 명령들이 전부 tx이다.
            더 이상 작은 단위로 나눌 수 없는것

        계좌 이체의 경우, 출금과 입금이 하나의 tx로 묶여야됨.
            둘다 성공하지 않으면 tx 이전의 상태로 rollback해야한다.

        '모' 아니면 '도'. 출금과 입금이 모두 성공하지 않으면 실패
            둘다 성공하던가 아니면 하나만 실패해도 취소!

    2.Transaction의 속성 - ACID
        원자성(Atomicity) - tx는 나눌 수 없는 하나의 작업은 다뤄져야한다.
        일관성(Consistency) - tx수행 전과 후가 일관된 상태를 유지해야 한다.
        고립성(Isolation) - 각 tx는 독립적으로 수행되어야 한다.
            Isolation Level: 각 tx을 완전히 고립시키면 좋지만, 작업에 따라 적절히 선택해야함.
            (ex: 사람들이 많이 쓰는 데이터베이스의 경우 level이 너무 높으면 한명이 쓰는 동안 다른 사람들이 못 사용 하는 경우가 발생 할 수 있다.)
        영속성(Durability) - 성공한 tx의 결과는 유지되어야 한다.

    3.커밋(Commit)과 롤백(Rollback)
        커밋(commit) - 작업 내용을 DB에 영구적으로 저장
        롤백(rollback) - 최근 변경사항을 취소(마지막 커밋으로 복귀)

    4.자동 커밋과 수동 커밋
        자동 커밋 - 명령 실행 후, 자동으로 커밋이 수행(rollback불가)

        수동 커밋 - 명령 실행 후, 커밋 수행 x (rollback가능)
            둘 이상의 명령어로 구성되어있는 tx는 수동 커밋으로 해놓는게 당연하다.

    5.tx의 isolation level (각 tx를 고립시키는 정도)
        1.READ UNCOMMITED - 커밋되지 않은 데이터도 읽기 가능
            tx1에서 읽고 tx2에서 insert를한뒤 다시 읽으면 그 자료까지 같이 읽힌다! 즉, 커밋을 안한 tx도 반영해서 읽는다
            dirty read라고도 한다. -> 다른 사람들이 손대서 더러워졌다는 의미.
        2.READ COMMITED - 커밋된 데이터만 읽기 가능
            insert같은 tx이 있었어도 읽을 수 있는것은 커밋이 된부분! phantom read라고도 한다. -> 갑자기 나타나서.
        3.REPEATABLE READ - TX가 시작된 이후 변경은 무시됨 - default
            반복해서 읽을 수 있다. ACID에서 고립성을 잘 따르는 모델
        4.SERIALIZABLE - 한번에 하나의 TX만 독립적으로 수행 (고립도 최상위) - 직렬로 처리! 한번에 하나씩만 처리가 되니까 각 tx이 철저히 독립적으로 수행!
            하지만 tx들은 어느정도 겹쳐서 돌아가야 한다. 그래야 적은 하드웨어 자원으로 많은 사람들이 사용할 수 있기 때문에!
            성능은 떨어지지만 date의 품질이 올라간다! 여러 사람들이 하나의 db를 다루다보면 문제가 생길 수 있기 마련
            하나하나의 tx가 끝나야 다른 tx가 실행가능하다.

    실습
        isolation level이 SERIALIZABLE상태일 때는 TX이 진행중이면 다른 TX에서 INSERT같은 명령을 수행하면 RUNNING이 뜬다.
        conn.setAutoCommit(true); true이면 오토커밋, false이면 수동커밋이다.