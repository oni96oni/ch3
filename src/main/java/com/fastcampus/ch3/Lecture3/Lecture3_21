서비스 계층의 분리와 @Transactional(3)

    @Transactional이 동작하지 않는 이유는 같은 클래스에 속한 메서드끼리의 호출(내부 호출)이기 떄문.
    프록시 방식(디폴트)의 AOP는 내부 호출인 경우, Advice가 적용 되지 않음 그래서 Tx가 적용되지 않는 것임 두 메서드를 별도의 클래스로 분리하면 Tx가 적용됨
    근본적인 해결은 프록시 방식이 아닌 다른 방식을 사용해야함.

    PlatformTransactionManager tm = new DataSourceTransactionManager(DataSource);
    DefaultTransactionDefinition txd = new DefaultTransactionDefinition();
    txd.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
    TransactionStatus status = tm.getTransaction(txd);
    이 위의 4줄이

    @Transactional(propagation = Propagation.REQUIRED_NEW, rollbackFor = Exception.class)
    로 바뀐것! 애너테이션을 사용함으로써 코드를 줄일 수 있다.

    Tx1 과 Tx2의 conn이 서로 다른것이 정상! REQUIRES_NEW로 했기때문

    애너테이션을 쓰니까 conn이 모두 다 같은 것으로 나왔다.
