Spring DI 활용하기 - 실습
    빈으로 사용할 클래스들을 등록해 주어야한다 그럴때 beans태그 사용
    config.txt 대신에 config.xml을 만들어서 쓴다.
    아래와 같이 쓴다.

    getBean은 같은 객체를 반환. 기본적으로 싱글톤이라 같은 값을 반환
    대부분의 서버 프로그램은 싱글톤으로 되어있다
    같은 기능을 가진 객체를 굳이 여러개 둘 필요 없어서

    때로는 다른 객체를 여러개를 생성해야 할때가 있다.
    다른 객체를 생산할때 xml 파일 bean설정에서 scope="prototype"을 xml 빈아이디에 주면된다. 기본이 싱글톤이라서 생략되어있음.
    scope="prototype" 이면 매번 새로운 객체가 만들어진다
    클래스의 객체를 하나만 생성하는것이 싱글톤이다.

    setter호출하는 대신 xml에서 <property> 태그를 사용해서 설정 가능하다.
    대신! setter가 있어야 <property>를 쓸 수 있다. <property>태그가 setter를 호출해서 사용한다.

    <property> 태그 대신에 <constructor-arg> 태그를 사용하려면 생성자를 생성해주어야한다.
        (위 방법은 setter 대신에 생성자를 사용해서 초기화하는 방법)

    기본적으로 <property>태그 사용!

    @Autowired는 빈(객체)들 간에 관계를 만들어 주는것
    @Value는 특이한 기능이 있는데 파일이나 시스템정보에서 값을 읽어와서 쓸 수있다.

    원래는 @Autowired 애너테이션을 사용하기 위해서는 xml파일에다가 <context:annotation-config/>를 추가해주어야 한다.

    @Autowired는 타입에 맞는거 하나만 넣는것이어서 doors가 하나만 찍힘. 만약에 타입에 맞는 빈이 여러개였으면 여러개 집어 넣는다. (door는 배열이니까 괜찮다)

    @Component, @Component("engine"), <bean id="engine" class="com.fastcampus.ch3.Engine"/>     이 셋다 모두 동일한 역할
    @Component매개변수값 생략하면 참조타입의 첫글자를 소문자로한 값으로한다

    타입으로 찾을때는 1개만 있어야하는데 3개나 있으니까 오류가 난다
        같은타입이 여러개일때는 타입으로 찾으면 안된다!(byType) 이름으로 찾아야해!(byName)

    @Autowired는 타입으로 빈을 찾아서 주입을 하는데 만약에 같은 타입이 여러개면!
    @Qualifier가 동작해서 후보중에 이 애너테이션의 매개변수로 선택한다. @Resource애너테이션 써도 ok

    @Autowired
    @Qualifier("superEngine")
        이 위의 두개는 타입으로 검색한다음에 결과중에서 못찾으면 이름으로 찾는것
    @Resource(name="superEngine") Engine engine;
        리소스는 애초부터 이름으로만 찾는것

    해당하는 결과가 없으면 에러가 발생!

    한타입당 한개의 빈만 사용하는 경우가 많다! 같은 타입빈이 많으면 위의 애너테이션을 사용한다.

    @Autowired를 많이 쓰는 이유는 타입은 잘안바뀌고 검사하기 쉬운 반면에, 이름은 자주 바뀐다! 하드코딩을 피하자는 의미.