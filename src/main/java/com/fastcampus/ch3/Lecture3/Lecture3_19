서비스 계층의 분리와 @Transactional
    1.서비스 계층(Layer)의 분리 - 비지니스 로직의 분리
        중복 제거, 관심사의 분리
        성격이 다른 것들, 변경되는 이유가 다른코드들은 분리되어야 한다!
        ★스프링mvc에서 사용자의 요청을 받아서 흐름을 제어하는 일을 맡은것이 Controller!

        사용자의 이력(history)를 다루는 일이 생겼다 치자. 그러면 controller에 주입을해야 하는데 이러면
        dao가 새롭게 하나 추가되었기 때문에 registerController가 바뀌어야 하는데 이것은 올바르지 않다.
        비즈니스로직이 바뀌었는데 컨트롤러가 바뀐다? 컨트롤러는 비즈니스로직담당이 아니야! 비즈니스로직을 담당할 새로운 객체(계층)를 만들자
        Service계층을 만들어서 DAO를 DI하고, Controller는 이 Service를 주입받아서 사용하면 된다!

        Presentation layer, Business logic(서비스 계층), Persistence(영속계층, DataAccessLayer) Layer 이렇게 3가지로 나누는게 보통!
        -> @Controller      -> @Service                 -> @Repository

        서비스계층의 메서드들의 이름은 업무용어스럽다. 영속계층의 메서드들은 sql적

        tx을 적용하기에는 서비스 계층이 적합하다!
            둘중 하나라도 실패하면 회원가입같은것은 실패하게끔 해야하기 때문에! (ex: insertUser + insertUserHistory)

        @Controller, @Service, @Repository 등의 애너테이션들은 @Component를 포함하고 있기 때문에 component-scan으로 자동스캔이 다 된다

    2.TransactionManager란?
        DAO의 각 메서드는 개별 Connection을 사용
        메서드들 마다 하나씩 따로 커넥션을 만들어서 처리를 하는것 하지만 tx은 1개의 커넥션에서 이루어져야해!
        그래서 개별 커넥션을 한개의 커넥션을 쓰게 유도를 해줘야한다.

        같은 트랜젝션에 있는 명령들은 같은 트랜젝션에서 쓰게 하는것이 트랜젝션매니저
        dao와 db사이에서 작동

        같은 tx내에서 같은 Connection을 사용할 수 있게 관리!

        DAO에서 Connection을 얻거나 반환할때 DataSourceUtils를 사용해야한다.
        (예시코드)
        ★conn = DataSourceUtils.getConnection(dataSource);
        try {
            conn.setAutoCommit(false);
            //...
            conn.commit();
        } catch (SQLException e) {
            conn.rollback();
            throw e;
        } finally {
            ★DataSourceUtils.releaseConnection(conn, dataSource);
        }

        ★ 표시된 두줄의 코드가 들어가야 transactionManager로 커넥션 관리를 해줄 수 있다.

    3.TransactionManager로 Transaction 적용하기
        (예시코드)
        PlatformTransactionManager txManager = new DataSourceTransactionManager(dataSource); -> txManager생성
        TransactionStatus txStatus = txManager.getTransaction(new DefaultTransactionDefinition()); -> tx의 속성을 정의
        try {
            a1Dao.insert(1,100); -> 개별 Connection이지만 txManager가 같은 Connection을 사용하게 해준다.
            a1Dao.insert(1,200);
            txManager.commit(txStatus);
        } catch (SQLException e) {
            txManager.rollback(txStatus);
            throw e;
        }

        디폴트txdefinition을 (tx의 속성을 정의)이용해서 트렌젝션을 얻어온다(getTransaction)
        두개의 작업 모두 성공해야 커밋! 실패하면, 에러가 발생하면 catch블럭에서 롤백한다.
        이렇게 하나의 tx으로 묶는것이다.

        위의 예시코드는 txmanager를 직접생성하는 방법, 빈으로 등록하는 방법 또한 있다.
        빈으로 등록하는 방법은 아래와 같다.
        <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <property name="dataSource" ref="dataSource"/>
        </bean>
        위의 코드는 빈으로 등록하는 방법이다.

        <tx:annotation-driven transactionManager="txManager"/>
            @Transactional 애너테이션을 사용할 수 있게해주는 태그

        @Bean(name="txManager")
        public DataSourceTransactionManager txManager() {
            return new DataSourceTransactionManager(dataSource);
        }

    4.@Transactional로 Transaction적용하기
        @Transactional의 기능은 AOP를 이용한 핵심 기능과 부가 기능의 분리!
            AOP는 자동 코드 추가! (Before, After, Around)
        핵심기능만 가진 메서드 분리 후 부가기능을 덧붙이는 클래스로 감싸준다.

        (코드예시)
        public void insertWithTx() throw Exception {
            PlatformTransactionManager txManager = new DataSourceTransactionManager(dataSource);
            TransactionStatus txStatus = txManager.getTransaction(new DefaultTransactionDefinition());
            try {
                a1Dao.insert(1,100);
                a1Dao.insert(1,200);
                txManager.commit(txStatus);
            } catch (SQLException e) {
                txManager.rollback(txStatus);
                throw e;
            }
        }


        @Transactional
        public void insertWithTx() throws Exception {
            a1Dao.insert(1, 100);
            a1Dao.insert(1, 200);
        }
        이렇게 복잡했던 코드를 간단하게 만들어 줄 수 있다. 핵심 로직에만 집중할 수 있게 해준다!

        @Transactional은 클래스나 인터페이스에도 붙일 수 있음
            클래스내의 모든 메서드들에게 적용
            인터페이스를 구현하는 클래스에 있는 모든 메서드들에게 적용
